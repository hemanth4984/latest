{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template that contains a Lambda function behind an API Gateway that has two stages mapped to two Lambda alias",
  "Parameters":{
      "Bucket" : {"Type" : "String"},
      "Key" : {"Type" : "String"}
  },
  "Resources": {
    "ResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "Bucket"},
		  "S3Key" : {"Ref" : "Key"}
        },
        "Description": "A greeting function",
        "FunctionName": "MinfyLambda",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Runtime": "nodejs8.10"
      }
    },
	"TestingNewFeature" : {
      "Type" : "AWS::Lambda::Version",
      "Properties" : {
        "FunctionName" : { "Ref" : "ResourceLambda" },
        "Description" : "A New version of MyFunction"
      }
    },
    "ResourceLambdaStageAlias": {
      "Type" : "AWS::Lambda::Alias",
      "Properties" : {
        "FunctionName" : {"Ref": "ResourceLambda"},
        "FunctionVersion" : "$LATEST",
        "Name" : "DEV"
      }
    },

    "ResourceLambdaProdAlias": {
      "Type" : "AWS::Lambda::Alias",
      "Properties" : {
        "FunctionName" : {"Ref": "ResourceLambda"},
        "FunctionVersion" : { "Fn::GetAtt" : [ "TestingNewFeature", "Version" ] },
        "Name" : "PROD"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },

    "ResourceApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "MinfyAPI",
        "Description": "API used for Greeting requests",
        "FailOnWarnings" : true
      }
    },

    "ResourceLambdaStagePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Ref": "ResourceLambdaStageAlias"},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["",
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ResourceApi"}, "/*"]
        ]}
      }
    },

    "ResourceLambdaProdPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Ref": "ResourceLambdaProdAlias"},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["",
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ResourceApi"}, "/*"]
        ]}
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ResourceLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ResourceApi"}, "/*"]]}
      }
    },
    "ResourceApiStageStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "RestApiId": {"Ref": "ResourceApi"},
        "StageName": "DEV",
        "Variables": {
          "LambdaAlias": "DEV"
        }
      }
    },

    "ResourceApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "RestApiId": {"Ref": "ResourceApi"},
        "StageName": "PROD",
        "Variables": {
          "LambdaAlias": "PROD"
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["GreetingRequest"],
      "Properties": {
        "RestApiId": {"Ref": "ResourceApi"},
        "StageName": "QA"
      }
    },

    "GreetingResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ResourceApi"},
        "ParentId": {"Fn::GetAtt": ["ResourceApi", "RootResourceId"]},
        "PathPart": "Welcome"
      }
    },

    "GreetingRequest": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["ResourceLambda", "Arn"]}, ":${stageVariables.LambdaAlias}", "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "{",
              "  \"name\": \"$input.params('name')\"",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "GreetingResource"},
        "RestApiId": {"Ref": "ResourceApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }
  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {"Fn::Join": ["",
        ["https://", {"Ref": "ResourceApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]
      ]}
    }
  }
}
